{"version":3,"sources":["components/MapboxLayer.js","components/functions/flattenGeoJson.js","components/functions/randomColor.js","components/searchResult.jsx","components/MapUI.jsx","components/Map.jsx","App.js","index.js"],"names":["MapBoxGLLayer","props","L","mapboxGL","GridLayer","propTypes","accessToken","PropTypes","string","isRequired","style","defaultProps","withLeaflet","polygonIndex","getRandomColor","color","i","Math","floor","random","SearchResult","handleClick","e","returnResult","target","state","id","this","searchResults","map","elem","className","value","place_id","onClick","key","display_name","type","lat","lon","React","Component","geojsonHeader","name","properties","geometry","coordinates","flattenGeoJson","polygon","geojson","split","MapUI","handleSearchResultClick","resultValue","getAttribute","selectedCityResult","filter","ex","parseInt","addOutline","handleSearch","length","axios","get","then","res","cityResults","data","el","setState","collapseSearch","console","log","refs","searchbar","onkeypress","charCode","keyCode","preventDefault","ref","onChange","placeholder","MapView","setCity","city","addCityLayer","outline","mapInst","leafletElement","boundaryColor","trueSize","markerDiv","iconAnchor","fill","fillColor","fillOpacity","weight","opacity","stroke","addTo","lng","zoom","selectedCity","latlng","position","Fragment","center","zoomSnap","MapboxLayer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.359e9f1e.chunk.js","sourcesContent":["import L from \"leaflet\";\nimport {} from \"mapbox-gl-leaflet\";\nimport PropTypes from \"prop-types\";\nimport { GridLayer, withLeaflet } from \"react-leaflet\";\n\nclass MapBoxGLLayer extends GridLayer {\n  createLeafletElement(props) {\n    return L.mapboxGL(props);\n  }\n}\n\n/*\n* Props are the options supported by Mapbox Map object\n* Find options here:https://www.mapbox.com/mapbox-gl-js/api/#new-mapboxgl-map-options-\n*/\nMapBoxGLLayer.propTypes = {\n  accessToken: PropTypes.string.isRequired,\n  style: PropTypes.string\n};\n\nMapBoxGLLayer.defaultProps = {\n  style: \"mapbox://styles/mapbox/streets-v9\"\n};\n\nexport default withLeaflet(MapBoxGLLayer);\n","let geojsonHeader = {\n  type: \"Feature\",\n  name: \"\",\n  properties: {},\n  geometry: {\n    type: \"Polygon\",\n    coordinates: [\n      [\n\n      ]\n    ]\n  }\n};\n\nlet polygonIndex;\n\nconst flattenGeoJson = (polygon) => {\n\n  // console.log('polygon ');\n  // console.log(polygon[0]);\n\n  // console.log('template ');\n  // console.log(geojsonHeader);\n\n  // MultiPolygons GeoJSONs have another layer of depth so\n  // this changes polygonIndex to the appriate array depth.\n  if (polygon[0].geojson.type === 'MultiPolygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0][0];\n  } else if (polygon[0].geojson.type === 'Polygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0];\n  }\n  geojsonHeader.geometry.coordinates[0] = polygonIndex;\n  geojsonHeader.name = polygon[0].display_name.split(',')[0];\n\n  return(geojsonHeader);\n}\n\nexport default flattenGeoJson;\n\n\n","const getRandomColor = () => {\n  let letters = '0123456789ABCDEF';\n  var color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  let outline = color;\n  return [color, outline];\n};\n\nexport default getRandomColor;\n","import React from 'react';\n\nexport default class SearchResult extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  handleClick = (e) => {\n    this.props.returnResult(e.target);\n  }\n\n  render() {\n    return (\n      <div id=\"searchResults\">\n        {this.props.searchResults.map(elem => (\n          <div\n            className={\"searchResult\"}\n            value={elem.place_id}\n            onClick={this.handleClick}\n            key={elem.place_id}>\n            <h4>{elem.display_name}</h4>\n            <p>{elem.type}</p>\n            <p>{elem.lat}</p>\n            <p>{elem.lon}</p>\n\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\n\n","import React from \"react\";\nimport SearchResult from \"./searchResult.jsx\";\n//import outlines from \"./outlines/outlines.js\";\nimport axios from \"axios\";\nimport flattenGeoJson from \"./functions/flattenGeoJson.js\";\n\nexport default class MapUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      style: {}\n    };\n  }\n\n  handleSearchResultClick = e => {\n    let resultValue = e.getAttribute(\"value\"); //select matching search result based on value element in result html attribute\n    let selectedCityResult = this.state.searchResults.filter(function(ex) {\n      return ex.place_id === parseInt(resultValue);\n    });\n    flattenGeoJson(selectedCityResult);\n\n    this.props.addOutline(flattenGeoJson(selectedCityResult), \"test\");\n  };\n\n  handleSearch = e => {\n    if (e.target.value.length > 3) {\n      axios\n        .get(`https://nominatim.openstreetmap.org/search.php?q=${e.target.value}&polygon_geojson=1&format=json&limit=5`)\n        .then(res => {\n          let cityResults = res.data.filter(function(el) {\n            if (el.geojson) {\n              return (\n                el.geojson.type === \"MultiPolygon\" ||\n                el.geojson.type === \"Polygon\"\n              );\n            } else {\n              return null; // avoid results not containing geojson.\n            } // only include search results that contain geojson polygons.\n          });\n          this.setState({ searchResults: cityResults });\n          //adds 15px to the bottom of search results container for prettiness.\n          if (this.state.searchResults.length > 0) {\n              this.setState({\n                style: { \"paddingBottom\": \"15px\" }\n              })\n            }\n        });\n    } else if (e.target.value.length < 3) {\n      this.setState({\n        searchResults: [],\n        style: { \"paddingBottom\": \"0px\" }\n      });\n    }\n  };\n\n  collapseSearch = () => {\n    console.log('test');\n  }\n\n  componentDidMount() {\n\n    // prevents form from refreshing page when hitting enter.\n    this.refs.searchbar.onkeypress = function(e) {\n      var key = e.charCode || e.keyCode || 0;\n      if (key === 13) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  render() {\n    // let itemList = Object.entries(outlines).map(([key, value]) => {\n    //   return (\n    //     <button key={key} id={key} onClick={this.handleClick}>\n    //       {value.name}\n    //     </button>\n    //   );\n    // });\n\n    return (\n      <div id=\"interface\">\n        <div id=\"searchBox\" style={this.state.style}>\n          <input\n            ref='searchbar'\n            type=\"search\"\n            onChange={this.handleSearch}\n            placeholder=\"Search\"\n          />\n          <div id=\"searchIconContainer\">\n            <div id=\"searchIcon\"></div>\n          </div>\n          <SearchResult\n            returnResult={this.handleSearchResultClick}\n            searchResults={this.state.searchResults}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Map as LeafletMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-truesize';\nimport MapboxLayer from \"./MapboxLayer.js\";\nimport getRandomColor from './functions/randomColor.js';\nimport MapUI from './MapUI.jsx';\n\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoiZGJlbGxidHIiLCJhIjoiY2p5dTF5OXltMDFrOTNjbWxqdjZ5NmV2MCJ9.kkIqnzU12LF90W8yr-jsJw\";\nlet theCityItself = '';\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 30.0,\n      lng: 0.0,\n      zoom: 3,\n      selectedCity: ''\n    }\n  };\n\n\n  componentDidMount() {\n\n  }\n\n  setCity = (city, name) => {\n    theCityItself = city; // usng a variabe is a few ms faster than setting state, wtf?\n    this.addCityLayer(city, name);\n  }\n\n  addCityLayer = (outline, name) => {\n    const mapInst = this.refs.map.leafletElement;\n    let boundaryColor = getRandomColor();\n    L.trueSize(outline, { // outlines[param].data\n      markerDiv: `<h2>${outline.name}</h2>`,\n      iconAnchor: [35, 35],\n      fill: true,\n      fillColor: boundaryColor[0],\n      fillOpacity: 0.15,\n      color: 'black',   //boundaryColor[1] is meant to be a\n      weight: 3,        //darker version of the same random\n      opacity: 1,       //color but black just looks nicer.\n      stroke: true,\n    }).addTo(mapInst);\n  }\n\n  handleClick(e){\n    console.log(e.latlng);\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n    <React.Fragment>\n      <LeafletMap center={position} zoom={this.state.zoom} zoomSnap='0.25' onClick={this.handleClick} ref='map' >\n        <MapboxLayer\n            accessToken={MAPBOX_ACCESS_TOKEN}\n            style=\"mapbox://styles/mapbox/light-v10\"\n          />\n      </LeafletMap>\n      <MapUI addOutline={this.setCity} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MapView\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.scss';\nimport MapView from './components/Map.jsx';\n\nfunction App() {\n  return (\n    <MapView />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}