{"version":3,"sources":["components/MapboxLayer.js","components/functions/flattenGeoJson.js","components/functions/randomColor.js","components/functions/capitalize.js","components/searchResult.jsx","components/Loader.jsx","components/MapUI.jsx","components/Modal.jsx","components/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["MapBoxGLLayer","props","L","mapboxGL","GridLayer","propTypes","accessToken","PropTypes","string","isRequired","style","defaultProps","withLeaflet","polygonIndex","getRandomColor","color","i","Math","floor","random","capitalize","s","charAt","toUpperCase","slice","SearchResult","handleClick","e","returnResult","target","drawResults","searchResults","map","elem","className","value","place_id","onClick","key","display_name","type","lat","lon","state","Fragment","this","length","React","Component","Loader","id","geojsonHeader","name","bbox","properties","geometry","coordinates","flattenGeoJson","polygon","geojson","split","boundingbox","MapUI","handleSearchResultClick","resultValue","getAttribute","selectedCityResult","filter","ex","parseInt","addOutline","handleSearch","match","console","log","setState","loading","axios","get","catch","error","then","res","cityResults","data","el","setFocus","focused","toggleUI","focusInput","searchStyle","refs","searchbar","focus","doThing","onkeypress","charCode","keyCode","preventDefault","onChange","collapseSearch","onMouseEnter","onMouseLeave","ref","placeholder","onBlur","onFocus","Modal","toggleDisplay","display","drawModal","href","localStorage","deafultBbox","MapView","setCity","city","addCityLayer","outline","mapInst","leafletElement","flyToBounds","boundaryColor","trueSize","markerDiv","iconAnchor","fill","fillColor","fillOpacity","weight","opacity","stroke","addTo","latlng","lng","zoom","selectedCity","position","center","minZoom","zoomSnap","bounceAtZoomLimits","wheelPxPerZoomLevel","useFlyTo","attributionControl","MapboxLayer","attribution","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.166329d4.chunk.js","sourcesContent":["import L from \"leaflet\";\nimport {} from \"mapbox-gl-leaflet\";\nimport PropTypes from \"prop-types\";\nimport { GridLayer, withLeaflet } from \"react-leaflet\";\n\nclass MapBoxGLLayer extends GridLayer {\n  createLeafletElement(props) {\n    return L.mapboxGL(props);\n  }\n}\n\n/*\n* Props are the options supported by Mapbox Map object\n* Find options here:https://www.mapbox.com/mapbox-gl-js/api/#new-mapboxgl-map-options-\n*/\nMapBoxGLLayer.propTypes = {\n  accessToken: PropTypes.string.isRequired,\n  style: PropTypes.string\n};\n\nMapBoxGLLayer.defaultProps = {\n  style: \"mapbox://styles/mapbox/streets-v9\"\n};\n\nexport default withLeaflet(MapBoxGLLayer);\n","let geojsonHeader = {\n  type: \"Feature\",\n  name: \"\",\n  bbox: [],\n  properties: {},\n  geometry: {\n    type: \"Polygon\",\n    coordinates: [\n      [\n\n      ]\n    ]\n  }\n};\n\nlet polygonIndex;\n\nconst flattenGeoJson = (polygon) => {\n  // MultiPolygons GeoJSONs have another layer of depth so\n  // this changes polygonIndex to the appriate array depth.\n  if (polygon[0].geojson.type === 'MultiPolygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0][0];\n  } else if (polygon[0].geojson.type === 'Polygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0];\n  }\n  geojsonHeader.geometry.coordinates[0] = polygonIndex;\n  geojsonHeader.name = polygon[0].display_name.split(',')[0];\n  geojsonHeader.bbox = polygon[0].boundingbox;\n\n  return(geojsonHeader);\n}\n\nexport default flattenGeoJson;\n\n\n","const getRandomColor = () => {\n  let letters = '0123456789ABCDEF';\n  var color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  let outline = color;\n  return [color, outline];\n};\n\nexport default getRandomColor;\n","const capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;\n","import React from 'react';\nimport capitalize from './functions/capitalize.js';\n\nexport default class SearchResult extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  handleClick = (e) => {\n    this.props.returnResult(e.target);\n  }\n\n  drawResults = () => {\n    return (\n    this.props.searchResults.map(elem => (\n          <div\n            className={\"searchResult\"}\n            value={elem.place_id}\n            onClick={this.handleClick}\n            key={elem.place_id}>\n            <h4>{elem.display_name}</h4>\n            <p>{(elem.type === 'administrative') ? \"Administrative Border\" : capitalize(elem.type)}</p>\n            <p>{elem.lat}</p>\n            <p>{elem.lon}</p>\n          </div>\n        ))\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.props.searchResults.length > 0) ? this.drawResults() : null}\n      </React.Fragment>\n    );\n  }\n}\n\n\n","import React from 'react';\n\nexport default class Loader extends React.Component {\n\n  render() {\n    return (\n    <div id='loader'>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n    );\n  }\n}\n","import React from \"react\";\nimport SearchResult from \"./searchResult.jsx\";\nimport Loader from \"./Loader.jsx\";\nimport axios from \"axios\";\nimport flattenGeoJson from \"./functions/flattenGeoJson.js\";\n\nexport default class MapUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      searchStyle: {'display': 'block'},\n      focused: true,\n      loading: false,\n      style: {}\n    };\n  }\n\n  handleSearchResultClick = e => {\n    let resultValue = e.getAttribute(\"value\"); //select matching search result based on value element in result html attribute\n    let selectedCityResult = this.state.searchResults.filter(function(ex) {\n      return ex.place_id === parseInt(resultValue);\n    });\n    //flattenGeoJson(selectedCityResult);\n    this.props.addOutline(flattenGeoJson(selectedCityResult), selectedCityResult[0].lat, selectedCityResult[0].lon, selectedCityResult[0].boundingbox);\n  };\n\n  handleSearch = e => {\n    if (e.target.value.match(/(type)/gm) && e.target.value.length > 10) {\n      console.log('found geojson');\n      // this.props.addOutline(flattenGeoJson(JSON.parse(e.target.value))); handle arbitrary geojson render\n    };\n    if (e.target.value.length > 3) {\n      this.setState({\n        loading:true\n      });\n      axios\n        .get(`https://nominatim.openstreetmap.org/search.php?q=${e.target.value}&polygon_geojson=1&format=json&limit=5`)\n        .catch(function (error) {\n          // handle error\n          console.log(error);})\n        .then(res => {\n          let cityResults = res.data.filter(function(el) {\n            if (el.geojson) {\n              return (\n                el.geojson.type === \"MultiPolygon\" ||\n                el.geojson.type === \"Polygon\"\n              );\n            } else {\n              return null; // avoid results not containing geojson.\n            } // only include search results that contain geojson polygons.\n          });\n          this.setState({ searchResults: cityResults, loading:false });\n        });\n    } else if (e.target.value.length < 3) {\n      this.setState({\n        searchResults: [],\n      });\n    }\n  };\n\n  setFocus = (e) => {\n    if (e.type === 'mouseenter') {\n      this.setState({\n        focused: true\n      });\n    } else if (e.type === 'mouseleave') {\n      this.setState({\n        focused: false\n      });\n    }\n  }\n\n\n  toggleUI = (e) => {\n    if (e.type === 'blur' && this.state.focused === true) {\n      this.focusInput();\n    } else if (e.type === 'blur' && this.state.focused === false) {\n      this.setState({\n        searchStyle: {'display' : 'none'},\n      });\n    } else if (e.type === 'focus') {\n      this.setState({\n        searchStyle: {'display' : 'block'}\n      });\n    }\n  }\n\n  focusInput = () => {\n    this.refs.searchbar.focus();\n  }\n\n  componentDidMount() {\n    this.focusInput();\n    // prevents form from refreshing page when hitting enter.\n    this.refs.searchbar.onkeypress = function(e) {\n      var key = e.charCode || e.keyCode || 0;\n      if (key === 13) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  doThing = () => {\n\n  }\n\n  render() {\n\n    return (\n\n      <div onChange={this.handleSearch}\n           onClick={this.collapseSearch}\n           onMouseEnter={this.setFocus}\n           onMouseLeave={this.setFocus}\n           id=\"interface\">\n        <div id=\"searchBox\"\n           onMouseEnter={this.setFocus}\n           style={this.state.style}>\n          <input\n            ref='searchbar'\n            type=\"search\"\n            placeholder=\"Search locations, cities, countries, states...\"\n            onMouseEnter={this.setFocus}\n            onBlur={this.toggleUI}\n            onFocus={this.toggleUI}\n            onClick={this.doThing}\n          />\n          <div id=\"searchIconContainer\">\n            <div id=\"searchIcon\"></div>\n          </div>\n          <div id=\"searchResults\" onMouseEnter={this.setFocus}  style={this.state.searchStyle}>\n          {this.state.loading ? <Loader/> : null}\n            <SearchResult\n            onClick={this.focusInput}\n              returnResult={this.handleSearchResultClick}\n              searchResults={this.state.searchResults}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display:true\n    };\n  }\n\n  componentDidMount() {\n    let visited = localStorage[\"alreadyVisited\"];\n    if (visited) {\n     this.setState({ display: false })\n     //do not view Popup\n    } else {\n       //this is the first time\n       localStorage[\"alreadyVisited\"] = true;\n       this.setState({ display: true});\n    }\n  }\n\n  toggleDisplay = () => {\n    this.setState({\n      display: false\n    });\n  }\n\n  drawModal = () => {\n    return (\n      <div className='modal'>\n      <div id='close' onClick={this.toggleDisplay} />\n      <h4>How it works:</h4>\n      <ul>\n        <li>Search for any location like a city, country or even a building.</li>\n        <li>Select a location from the search list to add it to the map.</li>\n        <li>Drag the outline around the map and compare it to other locations!</li>\n        <li>Bugs? <a href='https://github.com/x8BitRain/citysize'>Readme!</a></li>\n      </ul>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n    <React.Fragment>\n      {(this.state.display) ? this.drawModal() : null}\n    </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Map as LeafletMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-truesize';\nimport MapboxLayer from \"./MapboxLayer.js\";\nimport getRandomColor from './functions/randomColor.js';\nimport MapUI from './MapUI.jsx';\nimport Modal from './Modal.jsx'\n\nconst deafultBbox = [[-47.27922900257082, -117.42187500000001],[75.40885422846455, 116.54296875000001]]\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoiZGJlbGxidHIiLCJhIjoiY2p5dTF5OXltMDFrOTNjbWxqdjZ5NmV2MCJ9.kkIqnzU12LF90W8yr-jsJw\";\nlet theCityItself = '';\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 30.0,\n      lng: 0.0,\n      zoom: 3,\n      selectedCity: '',\n      focus: {}\n    }\n  };\n\n  componentDidMount() {\n\n  }\n\n  setCity = (city, lat, lon, bbox = deafultBbox) => {\n    theCityItself = city; // usng a variabe is a few ms faster than setting state, wtf?\n    this.addCityLayer(city, lat, lon, bbox);\n  }\n\n  addCityLayer = (outline, lat = 0.0, lon = 0.0, bbox) => {\n    const mapInst = this.refs.map.leafletElement;\n    mapInst.flyToBounds([[bbox[0],bbox[2]],[bbox[1],bbox[3]]]); // Sends camera to bounding box lat/longs\n    //mapInst.flyTo([lat, lon], 4);\n    let boundaryColor = getRandomColor();\n    L.trueSize(outline, { // outlines[param].data\n      markerDiv: `<h2 style='text-shadow: 0px 0px 14px rgba(255,255,255,1);'>${outline.name}</h2>`,\n      iconAnchor: [35, 35],\n      fill: true,\n      fillColor: boundaryColor[0],\n      fillOpacity: 0.15,\n      color: 'black',   //boundaryColor[1] is meant to be a\n      weight: 3,        //darker version of the same random\n      opacity: 1,       //color but black just looks nicer.\n      stroke: true,\n    }).addTo(mapInst);\n  }\n\n  handleClick = (e) => {\n    console.log(e.latlng);\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n    <React.Fragment>\n      <LeafletMap center={position}\n                  zoom={this.state.zoom}\n                  minZoom='3'\n                  zoomSnap='0.5'\n                  bounceAtZoomLimits='false'\n                  wheelPxPerZoomLevel='80'\n                  onClick={this.handleClick}\n                  ref='map'\n                  useFlyTo={true}\n                  attributionControl={true} >\n        <MapboxLayer\n            accessToken={MAPBOX_ACCESS_TOKEN}\n            style=\"mapbox://styles/mapbox/light-v10\"\n            attribution={'© <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> | © <a href=\"https://www.mapbox.com/\">MapBox</a> | <a href=\"https://github.com/x8BitRain/citysize/\">GitHub</a>'}\n          />\n      </LeafletMap>\n        <MapUI addOutline={this.setCity}  />\n        <Modal />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MapView\n","import React from 'react';\n//import logo from './logo.svg';\nimport MapView from './components/Map.jsx';\n\nfunction App() {\n  return (\n    <MapView />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}