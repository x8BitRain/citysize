{"version":3,"sources":["components/MapboxLayer.js","components/functions/flattenGeoJson.js","components/functions/randomColor.js","components/functions/capitalize.js","components/searchResult.jsx","components/loader.jsx","components/MapUI.jsx","components/Map.jsx","App.js","index.js"],"names":["MapBoxGLLayer","props","L","mapboxGL","GridLayer","propTypes","accessToken","PropTypes","string","isRequired","style","defaultProps","withLeaflet","polygonIndex","getRandomColor","color","i","Math","floor","random","capitalize","s","charAt","toUpperCase","slice","SearchResult","handleClick","e","returnResult","target","drawResults","searchResults","map","elem","className","value","place_id","onClick","key","display_name","type","lat","lon","state","Fragment","this","length","React","Component","loader","id","geojsonHeader","name","properties","geometry","coordinates","flattenGeoJson","polygon","geojson","split","MapUI","handleSearchResultClick","resultValue","getAttribute","selectedCityResult","filter","ex","parseInt","addOutline","handleSearch","setState","loading","axios","get","catch","error","console","log","then","res","cityResults","data","el","setFocus","focused","toggleUI","focusInput","searchStyle","refs","searchbar","focus","doThing","onkeypress","charCode","keyCode","preventDefault","onChange","collapseSearch","onMouseEnter","onMouseLeave","ref","placeholder","onBlur","onFocus","MapView","setCity","city","addCityLayer","outline","mapInst","leafletElement","flyTo","boundaryColor","trueSize","markerDiv","iconAnchor","fill","fillColor","fillOpacity","weight","opacity","stroke","addTo","latlng","lng","zoom","selectedCity","position","center","minZoom","zoomSnap","useFlyTo","attributionControl","MapboxLayer","attribution","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de14dde0.chunk.js","sourcesContent":["import L from \"leaflet\";\nimport {} from \"mapbox-gl-leaflet\";\nimport PropTypes from \"prop-types\";\nimport { GridLayer, withLeaflet } from \"react-leaflet\";\n\nclass MapBoxGLLayer extends GridLayer {\n  createLeafletElement(props) {\n    return L.mapboxGL(props);\n  }\n}\n\n/*\n* Props are the options supported by Mapbox Map object\n* Find options here:https://www.mapbox.com/mapbox-gl-js/api/#new-mapboxgl-map-options-\n*/\nMapBoxGLLayer.propTypes = {\n  accessToken: PropTypes.string.isRequired,\n  style: PropTypes.string\n};\n\nMapBoxGLLayer.defaultProps = {\n  style: \"mapbox://styles/mapbox/streets-v9\"\n};\n\nexport default withLeaflet(MapBoxGLLayer);\n","let geojsonHeader = {\n  type: \"Feature\",\n  name: \"\",\n  properties: {},\n  geometry: {\n    type: \"Polygon\",\n    coordinates: [\n      [\n        //TODO: add bounding box to geojson skelet\n      ]\n    ]\n  }\n};\n\nlet polygonIndex;\n\nconst flattenGeoJson = (polygon) => {\n  // MultiPolygons GeoJSONs have another layer of depth so\n  // this changes polygonIndex to the appriate array depth.\n  if (polygon[0].geojson.type === 'MultiPolygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0][0];\n  } else if (polygon[0].geojson.type === 'Polygon') {\n    polygonIndex = polygon[0].geojson.coordinates[0];\n  }\n  geojsonHeader.geometry.coordinates[0] = polygonIndex;\n  geojsonHeader.name = polygon[0].display_name.split(',')[0];\n\n  return(geojsonHeader);\n}\n\nexport default flattenGeoJson;\n\n\n","const getRandomColor = () => {\n  let letters = '0123456789ABCDEF';\n  var color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  let outline = color;\n  return [color, outline];\n};\n\nexport default getRandomColor;\n","const capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport default capitalize;\n","import React from 'react';\nimport capitalize from './functions/capitalize.js';\n\nexport default class SearchResult extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  handleClick = (e) => {\n    this.props.returnResult(e.target);\n  }\n\n  drawResults = () => {\n    return (\n    this.props.searchResults.map(elem => (\n          <div\n            className={\"searchResult\"}\n            value={elem.place_id}\n            onClick={this.handleClick}\n            key={elem.place_id}>\n            <h4>{elem.display_name}</h4>\n            <p>{(elem.type === 'administrative') ? \"Administrative Border\" : capitalize(elem.type)}</p>\n            <p>{elem.lat}</p>\n            <p>{elem.lon}</p>\n          </div>\n        ))\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {(this.props.searchResults.length > 0) ? this.drawResults() : null}\n      </React.Fragment>\n    );\n  }\n}\n\n\n","import React from 'react';\n\nexport default class loader extends React.Component {\n\n  render() {\n    return (\n    <div id='loader'>\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n    </div>\n    );\n  }\n}\n","import React from \"react\";\nimport SearchResult from \"./searchResult.jsx\";\nimport Loader from \"./loader.jsx\";\nimport axios from \"axios\";\nimport flattenGeoJson from \"./functions/flattenGeoJson.js\";\n\nexport default class MapUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      searchStyle: {'display': 'block'},\n      focused: true,\n      loading: false,\n      style: {}\n    };\n  }\n\n  handleSearchResultClick = e => {\n    let resultValue = e.getAttribute(\"value\"); //select matching search result based on value element in result html attribute\n    let selectedCityResult = this.state.searchResults.filter(function(ex) {\n      return ex.place_id === parseInt(resultValue);\n    });\n    //console.log(selectedCityResult[0].lon);\n    flattenGeoJson(selectedCityResult);\n\n    this.props.addOutline(flattenGeoJson(selectedCityResult), selectedCityResult[0].lat, selectedCityResult[0].lon);\n  };\n\n  handleSearch = e => {\n    if (e.target.value.length > 3) {\n      this.setState({\n        loading:true\n      });\n      axios\n        .get(`https://nominatim.openstreetmap.org/search.php?q=${e.target.value}&polygon_geojson=1&format=json&limit=5`)\n        .catch(function (error) {\n          // handle error\n          console.log(error);})\n        .then(res => {\n          let cityResults = res.data.filter(function(el) {\n            if (el.geojson) {\n              return (\n                el.geojson.type === \"MultiPolygon\" ||\n                el.geojson.type === \"Polygon\"\n              );\n            } else {\n              return null; // avoid results not containing geojson.\n            } // only include search results that contain geojson polygons.\n          });\n          this.setState({ searchResults: cityResults, loading:false });\n        });\n    } else if (e.target.value.length < 3) {\n      this.setState({\n        searchResults: [],\n      });\n    }\n  };\n\n  setFocus = (e) => {\n    if (e.type === 'mouseenter') {\n      this.setState({\n        focused: true\n      });\n    } else if (e.type === 'mouseleave') {\n      this.setState({\n        focused: false\n      });\n    }\n  }\n\n\n  toggleUI = (e) => {\n    if (e.type === 'blur' && this.state.focused === true) {\n      this.focusInput();\n    } else if (e.type === 'blur' && this.state.focused === false) {\n      this.setState({\n        searchStyle: {'display' : 'none'},\n        //style: { 'paddingBottom': '0px' }\n      });\n    } else if (e.type === 'focus') {\n      this.setState({\n        searchStyle: {'display' : 'block'}\n      });\n    }\n  }\n\n  focusInput = () => {\n    this.refs.searchbar.focus();\n  }\n\n  componentDidMount() {\n    this.focusInput();\n    // prevents form from refreshing page when hitting enter.\n    this.refs.searchbar.onkeypress = function(e) {\n      var key = e.charCode || e.keyCode || 0;\n      if (key === 13) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  doThing = () => {\n\n  }\n\n  render() {\n\n    return (\n\n      <div onChange={this.handleSearch}\n           onClick={this.collapseSearch}\n           onMouseEnter={this.setFocus}\n           onMouseLeave={this.setFocus}\n           id=\"interface\">\n        <div id=\"searchBox\"\n           onMouseEnter={this.setFocus}\n           style={this.state.style}>\n          <input\n            ref='searchbar'\n            type=\"search\"\n            placeholder=\"Search locations, cities, countries, states...\"\n            onMouseEnter={this.setFocus}\n            onBlur={this.toggleUI}\n            onFocus={this.toggleUI}\n            onClick={this.doThing}\n          />\n          <div id=\"searchIconContainer\">\n            <div id=\"searchIcon\"></div>\n          </div>\n          <div id=\"searchResults\" onMouseEnter={this.setFocus}  style={this.state.searchStyle}>\n          {this.state.loading ? <Loader/> : null}\n            <SearchResult\n            onClick={this.focusInput}\n              returnResult={this.handleSearchResultClick}\n              searchResults={this.state.searchResults}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Map as LeafletMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-truesize';\nimport MapboxLayer from \"./MapboxLayer.js\";\nimport getRandomColor from './functions/randomColor.js';\nimport MapUI from './MapUI.jsx';\n\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoiZGJlbGxidHIiLCJhIjoiY2p5dTF5OXltMDFrOTNjbWxqdjZ5NmV2MCJ9.kkIqnzU12LF90W8yr-jsJw\";\nlet theCityItself = '';\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 30.0,\n      lng: 0.0,\n      zoom: 3,\n      selectedCity: '',\n      focus: {}\n    }\n  };\n\n  componentDidMount() {\n\n  }\n\n  setCity = (city, lat, lon) => {\n    theCityItself = city; // usng a variabe is a few ms faster than setting state, wtf?\n    this.addCityLayer(city, lat, lon);\n  }\n\n  addCityLayer = (outline, lat, lon) => {\n    const mapInst = this.refs.map.leafletElement;\n    console.log(outline);\n    //mapInst.flyToBounds([[\"1.2101324\",\"103.6056259\"],[\"1.4715641\",\"104.0436413\"]]);\n    mapInst.flyTo([lat, lon], 4);\n    let boundaryColor = getRandomColor();\n    L.trueSize(outline, { // outlines[param].data\n      markerDiv: `<h2>${outline.name}</h2>`,\n      iconAnchor: [35, 35],\n      fill: true,\n      fillColor: boundaryColor[0],\n      fillOpacity: 0.15,\n      color: 'black',   //boundaryColor[1] is meant to be a\n      weight: 3,        //darker version of the same random\n      opacity: 1,       //color but black just looks nicer.\n      stroke: true,\n    }).addTo(mapInst);\n  }\n\n  handleClick = (e) => {\n    console.log(e.latlng);\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n    <React.Fragment>\n      <LeafletMap center={position}\n                  zoom={this.state.zoom}\n                  minZoom='2.5'\n                  zoomSnap='0.25'\n                  onClick={this.handleClick}\n                  ref='map'\n                  useFlyTo={true}\n                  attributionControl={true} >\n        <MapboxLayer\n            accessToken={MAPBOX_ACCESS_TOKEN}\n            style=\"mapbox://styles/mapbox/light-v10\"\n            attribution={'© <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> | © <a href=\"https://www.mapbox.com/\">MapBox</a>'}\n          />\n      </LeafletMap>\n      <MapUI addOutline={this.setCity}  />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MapView\n","import React from 'react';\n//import logo from './logo.svg';\nimport MapView from './components/Map.jsx';\n\nfunction App() {\n  return (\n    <MapView />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}